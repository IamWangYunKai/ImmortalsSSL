// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aidebug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  color_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Debug_Circle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Debug_Circle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AI_Debug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AI_Debug_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_aidebug_2eproto() {
  protobuf_AddDesc_aidebug_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aidebug.proto");
  GOOGLE_CHECK(file != NULL);
  color_descriptor_ = file->message_type(0);
  static const int color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, b_),
  };
  color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      color_descriptor_,
      color::default_instance_,
      color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(color));
  Debug_Point_descriptor_ = file->message_type(1);
  static const int Debug_Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, col_),
  };
  Debug_Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Point_descriptor_,
      Debug_Point::default_instance_,
      Debug_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Point));
  Debug_Line_descriptor_ = file->message_type(2);
  static const int Debug_Line_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, col_),
  };
  Debug_Line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Line_descriptor_,
      Debug_Line::default_instance_,
      Debug_Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Line));
  Debug_Rect_descriptor_ = file->message_type(3);
  static const int Debug_Rect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, col_),
  };
  Debug_Rect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Rect_descriptor_,
      Debug_Rect::default_instance_,
      Debug_Rect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Rect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Rect));
  Debug_Circle_descriptor_ = file->message_type(4);
  static const int Debug_Circle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, col_),
  };
  Debug_Circle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Debug_Circle_descriptor_,
      Debug_Circle::default_instance_,
      Debug_Circle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Debug_Circle));
  AI_Debug_descriptor_ = file->message_type(5);
  static const int AI_Debug_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, circle_),
  };
  AI_Debug_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AI_Debug_descriptor_,
      AI_Debug::default_instance_,
      AI_Debug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI_Debug, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AI_Debug));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aidebug_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    color_descriptor_, &color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Point_descriptor_, &Debug_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Line_descriptor_, &Debug_Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Rect_descriptor_, &Debug_Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Debug_Circle_descriptor_, &Debug_Circle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AI_Debug_descriptor_, &AI_Debug::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aidebug_2eproto() {
  delete color::default_instance_;
  delete color_reflection_;
  delete Debug_Point::default_instance_;
  delete Debug_Point_reflection_;
  delete Debug_Line::default_instance_;
  delete Debug_Line_reflection_;
  delete Debug_Rect::default_instance_;
  delete Debug_Rect_reflection_;
  delete Debug_Circle::default_instance_;
  delete Debug_Circle_reflection_;
  delete AI_Debug::default_instance_;
  delete AI_Debug_reflection_;
}

void protobuf_AddDesc_aidebug_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raidebug.proto\"(\n\005color\022\t\n\001r\030\001 \002(\002\022\t\n\001g"
    "\030\002 \002(\002\022\t\n\001b\030\003 \002(\002\"8\n\013Debug_Point\022\t\n\001x\030\001 "
    "\002(\002\022\t\n\001y\030\002 \002(\002\022\023\n\003col\030\003 \001(\0132\006.color\"Q\n\nD"
    "ebug_Line\022\n\n\002x1\030\001 \002(\002\022\n\n\002y1\030\002 \002(\002\022\n\n\002x2\030"
    "\003 \002(\002\022\n\n\002y2\030\004 \002(\002\022\023\n\003col\030\005 \001(\0132\006.color\"M"
    "\n\nDebug_Rect\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001w\030"
    "\003 \002(\002\022\t\n\001h\030\004 \002(\002\022\023\n\003col\030\005 \001(\0132\006.color\"D\n"
    "\014Debug_Circle\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001r"
    "\030\003 \002(\002\022\023\n\003col\030\004 \001(\0132\006.color\"|\n\010AI_Debug\022"
    "\033\n\005point\030\001 \003(\0132\014.Debug_Point\022\031\n\004line\030\002 \003"
    "(\0132\013.Debug_Line\022\031\n\004rect\030\003 \003(\0132\013.Debug_Re"
    "ct\022\035\n\006circle\030\004 \003(\0132\r.Debug_Circle", 473);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aidebug.proto", &protobuf_RegisterTypes);
  color::default_instance_ = new color();
  Debug_Point::default_instance_ = new Debug_Point();
  Debug_Line::default_instance_ = new Debug_Line();
  Debug_Rect::default_instance_ = new Debug_Rect();
  Debug_Circle::default_instance_ = new Debug_Circle();
  AI_Debug::default_instance_ = new AI_Debug();
  color::default_instance_->InitAsDefaultInstance();
  Debug_Point::default_instance_->InitAsDefaultInstance();
  Debug_Line::default_instance_->InitAsDefaultInstance();
  Debug_Rect::default_instance_->InitAsDefaultInstance();
  Debug_Circle::default_instance_->InitAsDefaultInstance();
  AI_Debug::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aidebug_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aidebug_2eproto {
  StaticDescriptorInitializer_aidebug_2eproto() {
    protobuf_AddDesc_aidebug_2eproto();
  }
} static_descriptor_initializer_aidebug_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int color::kRFieldNumber;
const int color::kGFieldNumber;
const int color::kBFieldNumber;
#endif  // !_MSC_VER

color::color()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void color::InitAsDefaultInstance() {
}

color::color(const color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void color::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

color::~color() {
  SharedDtor();
}

void color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return color_descriptor_;
}

const color& color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();  return *default_instance_;
}

color* color::default_instance_ = NULL;

color* color::New() const {
  return new color;
}

void color::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    g_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_g;
        break;
      }
      
      // required float g = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_b;
        break;
      }
      
      // required float b = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }
  
  // required float g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }
  
  // required float b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }
  
  // required float g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }
  
  // required float b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int color::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float r = 1;
    if (has_r()) {
      total_size += 1 + 4;
    }
    
    // required float g = 2;
    if (has_g()) {
      total_size += 1 + 4;
    }
    
    // required float b = 3;
    if (has_b()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void color::MergeFrom(const color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void color::CopyFrom(const color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void color::Swap(color* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = color_descriptor_;
  metadata.reflection = color_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Point::kXFieldNumber;
const int Debug_Point::kYFieldNumber;
const int Debug_Point::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Point::Debug_Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_Point::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Point::Debug_Point(const Debug_Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Point::~Debug_Point() {
  SharedDtor();
}

void Debug_Point::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Point_descriptor_;
}

const Debug_Point& Debug_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();  return *default_instance_;
}

Debug_Point* Debug_Point::default_instance_ = NULL;

Debug_Point* Debug_Point::New() const {
  return new Debug_Point;
}

void Debug_Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_col;
        break;
      }
      
      // optional .color col = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional .color col = 3;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->col(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional .color col = 3;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->col(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_Point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional .color col = 3;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Point::MergeFrom(const Debug_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Point::CopyFrom(const Debug_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Point::Swap(Debug_Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Point_descriptor_;
  metadata.reflection = Debug_Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Line::kX1FieldNumber;
const int Debug_Line::kY1FieldNumber;
const int Debug_Line::kX2FieldNumber;
const int Debug_Line::kY2FieldNumber;
const int Debug_Line::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Line::Debug_Line()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_Line::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Line::Debug_Line(const Debug_Line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_Line::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Line::~Debug_Line() {
  SharedDtor();
}

void Debug_Line::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Line_descriptor_;
}

const Debug_Line& Debug_Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();  return *default_instance_;
}

Debug_Line* Debug_Line::default_instance_ = NULL;

Debug_Line* Debug_Line::New() const {
  return new Debug_Line;
}

void Debug_Line::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    y1_ = 0;
    x2_ = 0;
    y2_ = 0;
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y1;
        break;
      }
      
      // required float y1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x2;
        break;
      }
      
      // required float x2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y2;
        break;
      }
      
      // required float y2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_col;
        break;
      }
      
      // optional .color col = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x1(), output);
  }
  
  // required float y1 = 2;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y1(), output);
  }
  
  // required float x2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x2(), output);
  }
  
  // required float y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y2(), output);
  }
  
  // optional .color col = 5;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->col(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_Line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x1(), target);
  }
  
  // required float y1 = 2;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y1(), target);
  }
  
  // required float x2 = 3;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x2(), target);
  }
  
  // required float y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y2(), target);
  }
  
  // optional .color col = 5;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->col(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_Line::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x1 = 1;
    if (has_x1()) {
      total_size += 1 + 4;
    }
    
    // required float y1 = 2;
    if (has_y1()) {
      total_size += 1 + 4;
    }
    
    // required float x2 = 3;
    if (has_x2()) {
      total_size += 1 + 4;
    }
    
    // required float y2 = 4;
    if (has_y2()) {
      total_size += 1 + 4;
    }
    
    // optional .color col = 5;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Line::Swap(Debug_Line* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Line_descriptor_;
  metadata.reflection = Debug_Line_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Rect::kXFieldNumber;
const int Debug_Rect::kYFieldNumber;
const int Debug_Rect::kWFieldNumber;
const int Debug_Rect::kHFieldNumber;
const int Debug_Rect::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Rect::Debug_Rect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_Rect::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Rect::Debug_Rect(const Debug_Rect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_Rect::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  w_ = 0;
  h_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Rect::~Debug_Rect() {
  SharedDtor();
}

void Debug_Rect::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Rect_descriptor_;
}

const Debug_Rect& Debug_Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();  return *default_instance_;
}

Debug_Rect* Debug_Rect::default_instance_ = NULL;

Debug_Rect* Debug_Rect::New() const {
  return new Debug_Rect;
}

void Debug_Rect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    w_ = 0;
    h_ = 0;
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_w;
        break;
      }
      
      // required float w = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_h;
        break;
      }
      
      // required float h = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_col;
        break;
      }
      
      // optional .color col = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float w = 3;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->w(), output);
  }
  
  // required float h = 4;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h(), output);
  }
  
  // optional .color col = 5;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->col(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float w = 3;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->w(), target);
  }
  
  // required float h = 4;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h(), target);
  }
  
  // optional .color col = 5;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->col(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_Rect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float w = 3;
    if (has_w()) {
      total_size += 1 + 4;
    }
    
    // required float h = 4;
    if (has_h()) {
      total_size += 1 + 4;
    }
    
    // optional .color col = 5;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Rect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Rect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Rect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Rect::MergeFrom(const Debug_Rect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Rect::CopyFrom(const Debug_Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Rect::Swap(Debug_Rect* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Rect_descriptor_;
  metadata.reflection = Debug_Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Debug_Circle::kXFieldNumber;
const int Debug_Circle::kYFieldNumber;
const int Debug_Circle::kRFieldNumber;
const int Debug_Circle::kColFieldNumber;
#endif  // !_MSC_VER

Debug_Circle::Debug_Circle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Debug_Circle::InitAsDefaultInstance() {
  col_ = const_cast< ::color*>(&::color::default_instance());
}

Debug_Circle::Debug_Circle(const Debug_Circle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Debug_Circle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  r_ = 0;
  col_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Debug_Circle::~Debug_Circle() {
  SharedDtor();
}

void Debug_Circle::SharedDtor() {
  if (this != default_instance_) {
    delete col_;
  }
}

void Debug_Circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Circle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Debug_Circle_descriptor_;
}

const Debug_Circle& Debug_Circle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();  return *default_instance_;
}

Debug_Circle* Debug_Circle::default_instance_ = NULL;

Debug_Circle* Debug_Circle::New() const {
  return new Debug_Circle;
}

void Debug_Circle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    r_ = 0;
    if (has_col()) {
      if (col_ != NULL) col_->::color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Debug_Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_r;
        break;
      }
      
      // required float r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_col;
        break;
      }
      
      // optional .color col = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Debug_Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->r(), output);
  }
  
  // optional .color col = 4;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->col(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Debug_Circle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->r(), target);
  }
  
  // optional .color col = 4;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->col(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Debug_Circle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float r = 3;
    if (has_r()) {
      total_size += 1 + 4;
    }
    
    // optional .color col = 4;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Circle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Debug_Circle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Debug_Circle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Debug_Circle::MergeFrom(const Debug_Circle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_col()) {
      mutable_col()->::color::MergeFrom(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Debug_Circle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Circle::CopyFrom(const Debug_Circle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void Debug_Circle::Swap(Debug_Circle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(r_, other->r_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Debug_Circle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Debug_Circle_descriptor_;
  metadata.reflection = Debug_Circle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AI_Debug::kPointFieldNumber;
const int AI_Debug::kLineFieldNumber;
const int AI_Debug::kRectFieldNumber;
const int AI_Debug::kCircleFieldNumber;
#endif  // !_MSC_VER

AI_Debug::AI_Debug()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AI_Debug::InitAsDefaultInstance() {
}

AI_Debug::AI_Debug(const AI_Debug& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AI_Debug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AI_Debug::~AI_Debug() {
  SharedDtor();
}

void AI_Debug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AI_Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AI_Debug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AI_Debug_descriptor_;
}

const AI_Debug& AI_Debug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aidebug_2eproto();  return *default_instance_;
}

AI_Debug* AI_Debug::default_instance_ = NULL;

AI_Debug* AI_Debug::New() const {
  return new AI_Debug;
}

void AI_Debug::Clear() {
  point_.Clear();
  line_.Clear();
  rect_.Clear();
  circle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AI_Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Debug_Point point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectTag(18)) goto parse_line;
        break;
      }
      
      // repeated .Debug_Line line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_line;
        if (input->ExpectTag(26)) goto parse_rect;
        break;
      }
      
      // repeated .Debug_Rect rect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rect;
        if (input->ExpectTag(34)) goto parse_circle;
        break;
      }
      
      // repeated .Debug_Circle circle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_circle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AI_Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Debug_Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }
  
  // repeated .Debug_Line line = 2;
  for (int i = 0; i < this->line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->line(i), output);
  }
  
  // repeated .Debug_Rect rect = 3;
  for (int i = 0; i < this->rect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rect(i), output);
  }
  
  // repeated .Debug_Circle circle = 4;
  for (int i = 0; i < this->circle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->circle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AI_Debug::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Debug_Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }
  
  // repeated .Debug_Line line = 2;
  for (int i = 0; i < this->line_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->line(i), target);
  }
  
  // repeated .Debug_Rect rect = 3;
  for (int i = 0; i < this->rect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rect(i), target);
  }
  
  // repeated .Debug_Circle circle = 4;
  for (int i = 0; i < this->circle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->circle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AI_Debug::ByteSize() const {
  int total_size = 0;
  
  // repeated .Debug_Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }
  
  // repeated .Debug_Line line = 2;
  total_size += 1 * this->line_size();
  for (int i = 0; i < this->line_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line(i));
  }
  
  // repeated .Debug_Rect rect = 3;
  total_size += 1 * this->rect_size();
  for (int i = 0; i < this->rect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rect(i));
  }
  
  // repeated .Debug_Circle circle = 4;
  total_size += 1 * this->circle_size();
  for (int i = 0; i < this->circle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AI_Debug::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AI_Debug* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AI_Debug*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AI_Debug::MergeFrom(const AI_Debug& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  line_.MergeFrom(from.line_);
  rect_.MergeFrom(from.rect_);
  circle_.MergeFrom(from.circle_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AI_Debug::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AI_Debug::CopyFrom(const AI_Debug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AI_Debug::IsInitialized() const {
  
  for (int i = 0; i < point_size(); i++) {
    if (!this->point(i).IsInitialized()) return false;
  }
  for (int i = 0; i < line_size(); i++) {
    if (!this->line(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rect_size(); i++) {
    if (!this->rect(i).IsInitialized()) return false;
  }
  for (int i = 0; i < circle_size(); i++) {
    if (!this->circle(i).IsInitialized()) return false;
  }
  return true;
}

void AI_Debug::Swap(AI_Debug* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    line_.Swap(&other->line_);
    rect_.Swap(&other->rect_);
    circle_.Swap(&other->circle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AI_Debug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AI_Debug_descriptor_;
  metadata.reflection = AI_Debug_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
