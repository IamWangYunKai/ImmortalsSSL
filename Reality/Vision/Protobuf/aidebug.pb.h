// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aidebug.proto

#ifndef PROTOBUF_aidebug_2eproto__INCLUDED
#define PROTOBUF_aidebug_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_aidebug_2eproto();
void protobuf_AssignDesc_aidebug_2eproto();
void protobuf_ShutdownFile_aidebug_2eproto();

class color;
class Debug_Point;
class Debug_Line;
class Debug_Rect;
class Debug_Circle;
class AI_Debug;

// ===================================================================

class color : public ::google::protobuf::Message {
 public:
  color();
  virtual ~color();
  
  color(const color& from);
  
  inline color& operator=(const color& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const color& default_instance();
  
  void Swap(color* other);
  
  // implements Message ----------------------------------------------
  
  color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const color& from);
  void MergeFrom(const color& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline float r() const;
  inline void set_r(float value);
  
  // required float g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline float g() const;
  inline void set_g(float value);
  
  // required float b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline float b() const;
  inline void set_b(float value);
  
  // @@protoc_insertion_point(class_scope:color)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float r_;
  float g_;
  float b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();
  
  void InitAsDefaultInstance();
  static color* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Point : public ::google::protobuf::Message {
 public:
  Debug_Point();
  virtual ~Debug_Point();
  
  Debug_Point(const Debug_Point& from);
  
  inline Debug_Point& operator=(const Debug_Point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Point& default_instance();
  
  void Swap(Debug_Point* other);
  
  // implements Message ----------------------------------------------
  
  Debug_Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Point& from);
  void MergeFrom(const Debug_Point& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional .color col = 3;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 3;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  
  // @@protoc_insertion_point(class_scope:Debug_Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_col();
  inline void clear_has_col();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  ::color* col_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();
  
  void InitAsDefaultInstance();
  static Debug_Point* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Line : public ::google::protobuf::Message {
 public:
  Debug_Line();
  virtual ~Debug_Line();
  
  Debug_Line(const Debug_Line& from);
  
  inline Debug_Line& operator=(const Debug_Line& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Line& default_instance();
  
  void Swap(Debug_Line* other);
  
  // implements Message ----------------------------------------------
  
  Debug_Line* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Line& from);
  void MergeFrom(const Debug_Line& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x1 = 1;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 1;
  inline float x1() const;
  inline void set_x1(float value);
  
  // required float y1 = 2;
  inline bool has_y1() const;
  inline void clear_y1();
  static const int kY1FieldNumber = 2;
  inline float y1() const;
  inline void set_y1(float value);
  
  // required float x2 = 3;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 3;
  inline float x2() const;
  inline void set_x2(float value);
  
  // required float y2 = 4;
  inline bool has_y2() const;
  inline void clear_y2();
  static const int kY2FieldNumber = 4;
  inline float y2() const;
  inline void set_y2(float value);
  
  // optional .color col = 5;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 5;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  
  // @@protoc_insertion_point(class_scope:Debug_Line)
 private:
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_y1();
  inline void clear_has_y1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_y2();
  inline void clear_has_y2();
  inline void set_has_col();
  inline void clear_has_col();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x1_;
  float y1_;
  float x2_;
  float y2_;
  ::color* col_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();
  
  void InitAsDefaultInstance();
  static Debug_Line* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Rect : public ::google::protobuf::Message {
 public:
  Debug_Rect();
  virtual ~Debug_Rect();
  
  Debug_Rect(const Debug_Rect& from);
  
  inline Debug_Rect& operator=(const Debug_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Rect& default_instance();
  
  void Swap(Debug_Rect* other);
  
  // implements Message ----------------------------------------------
  
  Debug_Rect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Rect& from);
  void MergeFrom(const Debug_Rect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float w = 3;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 3;
  inline float w() const;
  inline void set_w(float value);
  
  // required float h = 4;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 4;
  inline float h() const;
  inline void set_h(float value);
  
  // optional .color col = 5;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 5;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  
  // @@protoc_insertion_point(class_scope:Debug_Rect)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_col();
  inline void clear_has_col();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float w_;
  float h_;
  ::color* col_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();
  
  void InitAsDefaultInstance();
  static Debug_Rect* default_instance_;
};
// -------------------------------------------------------------------

class Debug_Circle : public ::google::protobuf::Message {
 public:
  Debug_Circle();
  virtual ~Debug_Circle();
  
  Debug_Circle(const Debug_Circle& from);
  
  inline Debug_Circle& operator=(const Debug_Circle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug_Circle& default_instance();
  
  void Swap(Debug_Circle* other);
  
  // implements Message ----------------------------------------------
  
  Debug_Circle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Debug_Circle& from);
  void MergeFrom(const Debug_Circle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float r = 3;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 3;
  inline float r() const;
  inline void set_r(float value);
  
  // optional .color col = 4;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 4;
  inline const ::color& col() const;
  inline ::color* mutable_col();
  inline ::color* release_col();
  
  // @@protoc_insertion_point(class_scope:Debug_Circle)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_col();
  inline void clear_has_col();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  ::color* col_;
  float r_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();
  
  void InitAsDefaultInstance();
  static Debug_Circle* default_instance_;
};
// -------------------------------------------------------------------

class AI_Debug : public ::google::protobuf::Message {
 public:
  AI_Debug();
  virtual ~AI_Debug();
  
  AI_Debug(const AI_Debug& from);
  
  inline AI_Debug& operator=(const AI_Debug& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AI_Debug& default_instance();
  
  void Swap(AI_Debug* other);
  
  // implements Message ----------------------------------------------
  
  AI_Debug* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AI_Debug& from);
  void MergeFrom(const AI_Debug& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Debug_Point point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::Debug_Point& point(int index) const;
  inline ::Debug_Point* mutable_point(int index);
  inline ::Debug_Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Point >*
      mutable_point();
  
  // repeated .Debug_Line line = 2;
  inline int line_size() const;
  inline void clear_line();
  static const int kLineFieldNumber = 2;
  inline const ::Debug_Line& line(int index) const;
  inline ::Debug_Line* mutable_line(int index);
  inline ::Debug_Line* add_line();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Line >&
      line() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Line >*
      mutable_line();
  
  // repeated .Debug_Rect rect = 3;
  inline int rect_size() const;
  inline void clear_rect();
  static const int kRectFieldNumber = 3;
  inline const ::Debug_Rect& rect(int index) const;
  inline ::Debug_Rect* mutable_rect(int index);
  inline ::Debug_Rect* add_rect();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Rect >&
      rect() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Rect >*
      mutable_rect();
  
  // repeated .Debug_Circle circle = 4;
  inline int circle_size() const;
  inline void clear_circle();
  static const int kCircleFieldNumber = 4;
  inline const ::Debug_Circle& circle(int index) const;
  inline ::Debug_Circle* mutable_circle(int index);
  inline ::Debug_Circle* add_circle();
  inline const ::google::protobuf::RepeatedPtrField< ::Debug_Circle >&
      circle() const;
  inline ::google::protobuf::RepeatedPtrField< ::Debug_Circle >*
      mutable_circle();
  
  // @@protoc_insertion_point(class_scope:AI_Debug)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Debug_Point > point_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Line > line_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Rect > rect_;
  ::google::protobuf::RepeatedPtrField< ::Debug_Circle > circle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_aidebug_2eproto();
  friend void protobuf_AssignDesc_aidebug_2eproto();
  friend void protobuf_ShutdownFile_aidebug_2eproto();
  
  void InitAsDefaultInstance();
  static AI_Debug* default_instance_;
};
// ===================================================================


// ===================================================================

// color

// required float r = 1;
inline bool color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void color::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float color::r() const {
  return r_;
}
inline void color::set_r(float value) {
  set_has_r();
  r_ = value;
}

// required float g = 2;
inline bool color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void color::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float color::g() const {
  return g_;
}
inline void color::set_g(float value) {
  set_has_g();
  g_ = value;
}

// required float b = 3;
inline bool color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void color::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float color::b() const {
  return b_;
}
inline void color::set_b(float value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// Debug_Point

// required float x = 1;
inline bool Debug_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Debug_Point::x() const {
  return x_;
}
inline void Debug_Point::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Debug_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Debug_Point::y() const {
  return y_;
}
inline void Debug_Point::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional .color col = 3;
inline bool Debug_Point::has_col() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Point::set_has_col() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Point::clear_has_col() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Point::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Point::col() const {
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Point::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  return col_;
}
inline ::color* Debug_Point::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Debug_Line

// required float x1 = 1;
inline bool Debug_Line::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Line::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Line::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Line::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline float Debug_Line::x1() const {
  return x1_;
}
inline void Debug_Line::set_x1(float value) {
  set_has_x1();
  x1_ = value;
}

// required float y1 = 2;
inline bool Debug_Line::has_y1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Line::set_has_y1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Line::clear_has_y1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Line::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
inline float Debug_Line::y1() const {
  return y1_;
}
inline void Debug_Line::set_y1(float value) {
  set_has_y1();
  y1_ = value;
}

// required float x2 = 3;
inline bool Debug_Line::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Line::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Line::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Line::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
inline float Debug_Line::x2() const {
  return x2_;
}
inline void Debug_Line::set_x2(float value) {
  set_has_x2();
  x2_ = value;
}

// required float y2 = 4;
inline bool Debug_Line::has_y2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug_Line::set_has_y2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Debug_Line::clear_has_y2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Debug_Line::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
inline float Debug_Line::y2() const {
  return y2_;
}
inline void Debug_Line::set_y2(float value) {
  set_has_y2();
  y2_ = value;
}

// optional .color col = 5;
inline bool Debug_Line::has_col() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Debug_Line::set_has_col() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Debug_Line::clear_has_col() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Debug_Line::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Line::col() const {
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Line::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  return col_;
}
inline ::color* Debug_Line::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Debug_Rect

// required float x = 1;
inline bool Debug_Rect::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Rect::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Rect::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Rect::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Debug_Rect::x() const {
  return x_;
}
inline void Debug_Rect::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Debug_Rect::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Rect::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Rect::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Rect::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Debug_Rect::y() const {
  return y_;
}
inline void Debug_Rect::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float w = 3;
inline bool Debug_Rect::has_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Rect::set_has_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Rect::clear_has_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Rect::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Debug_Rect::w() const {
  return w_;
}
inline void Debug_Rect::set_w(float value) {
  set_has_w();
  w_ = value;
}

// required float h = 4;
inline bool Debug_Rect::has_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug_Rect::set_has_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Debug_Rect::clear_has_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Debug_Rect::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline float Debug_Rect::h() const {
  return h_;
}
inline void Debug_Rect::set_h(float value) {
  set_has_h();
  h_ = value;
}

// optional .color col = 5;
inline bool Debug_Rect::has_col() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Debug_Rect::set_has_col() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Debug_Rect::clear_has_col() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Debug_Rect::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Rect::col() const {
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Rect::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  return col_;
}
inline ::color* Debug_Rect::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Debug_Circle

// required float x = 1;
inline bool Debug_Circle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_Circle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_Circle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_Circle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Debug_Circle::x() const {
  return x_;
}
inline void Debug_Circle::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Debug_Circle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_Circle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_Circle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_Circle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Debug_Circle::y() const {
  return y_;
}
inline void Debug_Circle::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float r = 3;
inline bool Debug_Circle::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_Circle::set_has_r() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_Circle::clear_has_r() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_Circle::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float Debug_Circle::r() const {
  return r_;
}
inline void Debug_Circle::set_r(float value) {
  set_has_r();
  r_ = value;
}

// optional .color col = 4;
inline bool Debug_Circle::has_col() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug_Circle::set_has_col() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Debug_Circle::clear_has_col() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Debug_Circle::clear_col() {
  if (col_ != NULL) col_->::color::Clear();
  clear_has_col();
}
inline const ::color& Debug_Circle::col() const {
  return col_ != NULL ? *col_ : *default_instance_->col_;
}
inline ::color* Debug_Circle::mutable_col() {
  set_has_col();
  if (col_ == NULL) col_ = new ::color;
  return col_;
}
inline ::color* Debug_Circle::release_col() {
  clear_has_col();
  ::color* temp = col_;
  col_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AI_Debug

// repeated .Debug_Point point = 1;
inline int AI_Debug::point_size() const {
  return point_.size();
}
inline void AI_Debug::clear_point() {
  point_.Clear();
}
inline const ::Debug_Point& AI_Debug::point(int index) const {
  return point_.Get(index);
}
inline ::Debug_Point* AI_Debug::mutable_point(int index) {
  return point_.Mutable(index);
}
inline ::Debug_Point* AI_Debug::add_point() {
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Point >&
AI_Debug::point() const {
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Point >*
AI_Debug::mutable_point() {
  return &point_;
}

// repeated .Debug_Line line = 2;
inline int AI_Debug::line_size() const {
  return line_.size();
}
inline void AI_Debug::clear_line() {
  line_.Clear();
}
inline const ::Debug_Line& AI_Debug::line(int index) const {
  return line_.Get(index);
}
inline ::Debug_Line* AI_Debug::mutable_line(int index) {
  return line_.Mutable(index);
}
inline ::Debug_Line* AI_Debug::add_line() {
  return line_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Line >&
AI_Debug::line() const {
  return line_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Line >*
AI_Debug::mutable_line() {
  return &line_;
}

// repeated .Debug_Rect rect = 3;
inline int AI_Debug::rect_size() const {
  return rect_.size();
}
inline void AI_Debug::clear_rect() {
  rect_.Clear();
}
inline const ::Debug_Rect& AI_Debug::rect(int index) const {
  return rect_.Get(index);
}
inline ::Debug_Rect* AI_Debug::mutable_rect(int index) {
  return rect_.Mutable(index);
}
inline ::Debug_Rect* AI_Debug::add_rect() {
  return rect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Rect >&
AI_Debug::rect() const {
  return rect_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Rect >*
AI_Debug::mutable_rect() {
  return &rect_;
}

// repeated .Debug_Circle circle = 4;
inline int AI_Debug::circle_size() const {
  return circle_.size();
}
inline void AI_Debug::clear_circle() {
  circle_.Clear();
}
inline const ::Debug_Circle& AI_Debug::circle(int index) const {
  return circle_.Get(index);
}
inline ::Debug_Circle* AI_Debug::mutable_circle(int index) {
  return circle_.Mutable(index);
}
inline ::Debug_Circle* AI_Debug::add_circle() {
  return circle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Debug_Circle >&
AI_Debug::circle() const {
  return circle_;
}
inline ::google::protobuf::RepeatedPtrField< ::Debug_Circle >*
AI_Debug::mutable_circle() {
  return &circle_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aidebug_2eproto__INCLUDED
