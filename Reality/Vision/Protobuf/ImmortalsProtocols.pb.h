// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImmortalsProtocols.proto

#ifndef PROTOBUF_ImmortalsProtocols_2eproto__INCLUDED
#define PROTOBUF_ImmortalsProtocols_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "messages_robocup_ssl_detection.pb.h"
#include "aidebug.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ImmortalsProtocols_2eproto();
void protobuf_AssignDesc_ImmortalsProtocols_2eproto();
void protobuf_ShutdownFile_ImmortalsProtocols_2eproto();

class ballsDataMsg;
class robotDataMsg;
class gameStateMsg;
class AiGuiMsg;

// ===================================================================

class ballsDataMsg : public ::google::protobuf::Message {
 public:
  ballsDataMsg();
  virtual ~ballsDataMsg();
  
  ballsDataMsg(const ballsDataMsg& from);
  
  inline ballsDataMsg& operator=(const ballsDataMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ballsDataMsg& default_instance();
  
  void Swap(ballsDataMsg* other);
  
  // implements Message ----------------------------------------------
  
  ballsDataMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ballsDataMsg& from);
  void MergeFrom(const ballsDataMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SSL_DetectionBall balls = 1;
  inline int balls_size() const;
  inline void clear_balls();
  static const int kBallsFieldNumber = 1;
  inline const ::SSL_DetectionBall& balls(int index) const;
  inline ::SSL_DetectionBall* mutable_balls(int index);
  inline ::SSL_DetectionBall* add_balls();
  inline const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >&
      balls() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >*
      mutable_balls();
  
  // required uint32 seenState = 2;
  inline bool has_seenstate() const;
  inline void clear_seenstate();
  static const int kSeenStateFieldNumber = 2;
  inline ::google::protobuf::uint32 seenstate() const;
  inline void set_seenstate(::google::protobuf::uint32 value);
  
  // required float x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline float z() const;
  inline void set_z(float value);
  
  // required float vx = 6;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 6;
  inline float vx() const;
  inline void set_vx(float value);
  
  // required float vy = 7;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 7;
  inline float vy() const;
  inline void set_vy(float value);
  
  // required float vdir = 8;
  inline bool has_vdir() const;
  inline void clear_vdir();
  static const int kVdirFieldNumber = 8;
  inline float vdir() const;
  inline void set_vdir(float value);
  
  // required float vmag = 9;
  inline bool has_vmag() const;
  inline void clear_vmag();
  static const int kVmagFieldNumber = 9;
  inline float vmag() const;
  inline void set_vmag(float value);
  
  // @@protoc_insertion_point(class_scope:ballsDataMsg)
 private:
  inline void set_has_seenstate();
  inline void clear_has_seenstate();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_vdir();
  inline void clear_has_vdir();
  inline void set_has_vmag();
  inline void clear_has_vmag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall > balls_;
  ::google::protobuf::uint32 seenstate_;
  float x_;
  float y_;
  float z_;
  float vx_;
  float vy_;
  float vdir_;
  float vmag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_AssignDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_ShutdownFile_ImmortalsProtocols_2eproto();
  
  void InitAsDefaultInstance();
  static ballsDataMsg* default_instance_;
};
// -------------------------------------------------------------------

class robotDataMsg : public ::google::protobuf::Message {
 public:
  robotDataMsg();
  virtual ~robotDataMsg();
  
  robotDataMsg(const robotDataMsg& from);
  
  inline robotDataMsg& operator=(const robotDataMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const robotDataMsg& default_instance();
  
  void Swap(robotDataMsg* other);
  
  // implements Message ----------------------------------------------
  
  robotDataMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const robotDataMsg& from);
  void MergeFrom(const robotDataMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 seenState = 1;
  inline bool has_seenstate() const;
  inline void clear_seenstate();
  static const int kSeenStateFieldNumber = 1;
  inline ::google::protobuf::uint32 seenstate() const;
  inline void set_seenstate(::google::protobuf::uint32 value);
  
  // optional uint32 robot_id = 2;
  inline bool has_robot_id() const;
  inline void clear_robot_id();
  static const int kRobotIdFieldNumber = 2;
  inline ::google::protobuf::uint32 robot_id() const;
  inline void set_robot_id(::google::protobuf::uint32 value);
  
  // required float x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float orientation = 5;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 5;
  inline float orientation() const;
  inline void set_orientation(float value);
  
  // required float omega = 6;
  inline bool has_omega() const;
  inline void clear_omega();
  static const int kOmegaFieldNumber = 6;
  inline float omega() const;
  inline void set_omega(float value);
  
  // required float vx = 7;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 7;
  inline float vx() const;
  inline void set_vx(float value);
  
  // optional float vy = 8;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 8;
  inline float vy() const;
  inline void set_vy(float value);
  
  // required float vdir = 9;
  inline bool has_vdir() const;
  inline void clear_vdir();
  static const int kVdirFieldNumber = 9;
  inline float vdir() const;
  inline void set_vdir(float value);
  
  // required float vmag = 10;
  inline bool has_vmag() const;
  inline void clear_vmag();
  static const int kVmagFieldNumber = 10;
  inline float vmag() const;
  inline void set_vmag(float value);
  
  // required bool own = 11;
  inline bool has_own() const;
  inline void clear_own();
  static const int kOwnFieldNumber = 11;
  inline bool own() const;
  inline void set_own(bool value);
  
  // @@protoc_insertion_point(class_scope:robotDataMsg)
 private:
  inline void set_has_seenstate();
  inline void clear_has_seenstate();
  inline void set_has_robot_id();
  inline void clear_has_robot_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_omega();
  inline void clear_has_omega();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_vdir();
  inline void clear_has_vdir();
  inline void set_has_vmag();
  inline void clear_has_vmag();
  inline void set_has_own();
  inline void clear_has_own();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 seenstate_;
  ::google::protobuf::uint32 robot_id_;
  float x_;
  float y_;
  float orientation_;
  float omega_;
  float vx_;
  float vy_;
  float vdir_;
  float vmag_;
  bool own_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_AssignDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_ShutdownFile_ImmortalsProtocols_2eproto();
  
  void InitAsDefaultInstance();
  static robotDataMsg* default_instance_;
};
// -------------------------------------------------------------------

class gameStateMsg : public ::google::protobuf::Message {
 public:
  gameStateMsg();
  virtual ~gameStateMsg();
  
  gameStateMsg(const gameStateMsg& from);
  
  inline gameStateMsg& operator=(const gameStateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const gameStateMsg& default_instance();
  
  void Swap(gameStateMsg* other);
  
  // implements Message ----------------------------------------------
  
  gameStateMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gameStateMsg& from);
  void MergeFrom(const gameStateMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string refcmd = 1;
  inline bool has_refcmd() const;
  inline void clear_refcmd();
  static const int kRefcmdFieldNumber = 1;
  inline const ::std::string& refcmd() const;
  inline void set_refcmd(const ::std::string& value);
  inline void set_refcmd(const char* value);
  inline void set_refcmd(const char* value, size_t size);
  inline ::std::string* mutable_refcmd();
  inline ::std::string* release_refcmd();
  
  // required string state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  
  // required uint32 timeRemaining = 3;
  inline bool has_timeremaining() const;
  inline void clear_timeremaining();
  static const int kTimeRemainingFieldNumber = 3;
  inline ::google::protobuf::uint32 timeremaining() const;
  inline void set_timeremaining(::google::protobuf::uint32 value);
  
  // required uint32 goalBlue = 4;
  inline bool has_goalblue() const;
  inline void clear_goalblue();
  static const int kGoalBlueFieldNumber = 4;
  inline ::google::protobuf::uint32 goalblue() const;
  inline void set_goalblue(::google::protobuf::uint32 value);
  
  // required uint32 goalYellow = 5;
  inline bool has_goalyellow() const;
  inline void clear_goalyellow();
  static const int kGoalYellowFieldNumber = 5;
  inline ::google::protobuf::uint32 goalyellow() const;
  inline void set_goalyellow(::google::protobuf::uint32 value);
  
  // required bool probGoalBlue = 6;
  inline bool has_probgoalblue() const;
  inline void clear_probgoalblue();
  static const int kProbGoalBlueFieldNumber = 6;
  inline bool probgoalblue() const;
  inline void set_probgoalblue(bool value);
  
  // required bool probGoalYellow = 7;
  inline bool has_probgoalyellow() const;
  inline void clear_probgoalyellow();
  static const int kProbGoalYellowFieldNumber = 7;
  inline bool probgoalyellow() const;
  inline void set_probgoalyellow(bool value);
  
  // optional bool twoDefBlue = 8;
  inline bool has_twodefblue() const;
  inline void clear_twodefblue();
  static const int kTwoDefBlueFieldNumber = 8;
  inline bool twodefblue() const;
  inline void set_twodefblue(bool value);
  
  // optional bool twoDefYellow = 9;
  inline bool has_twodefyellow() const;
  inline void clear_twodefyellow();
  static const int kTwoDefYellowFieldNumber = 9;
  inline bool twodefyellow() const;
  inline void set_twodefyellow(bool value);
  
  // optional bool probBallOut = 10;
  inline bool has_probballout() const;
  inline void clear_probballout();
  static const int kProbBallOutFieldNumber = 10;
  inline bool probballout() const;
  inline void set_probballout(bool value);
  
  // @@protoc_insertion_point(class_scope:gameStateMsg)
 private:
  inline void set_has_refcmd();
  inline void clear_has_refcmd();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timeremaining();
  inline void clear_has_timeremaining();
  inline void set_has_goalblue();
  inline void clear_has_goalblue();
  inline void set_has_goalyellow();
  inline void clear_has_goalyellow();
  inline void set_has_probgoalblue();
  inline void clear_has_probgoalblue();
  inline void set_has_probgoalyellow();
  inline void clear_has_probgoalyellow();
  inline void set_has_twodefblue();
  inline void clear_has_twodefblue();
  inline void set_has_twodefyellow();
  inline void clear_has_twodefyellow();
  inline void set_has_probballout();
  inline void clear_has_probballout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* refcmd_;
  ::std::string* state_;
  ::google::protobuf::uint32 timeremaining_;
  ::google::protobuf::uint32 goalblue_;
  ::google::protobuf::uint32 goalyellow_;
  bool probgoalblue_;
  bool probgoalyellow_;
  bool twodefblue_;
  bool twodefyellow_;
  bool probballout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_AssignDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_ShutdownFile_ImmortalsProtocols_2eproto();
  
  void InitAsDefaultInstance();
  static gameStateMsg* default_instance_;
};
// -------------------------------------------------------------------

class AiGuiMsg : public ::google::protobuf::Message {
 public:
  AiGuiMsg();
  virtual ~AiGuiMsg();
  
  AiGuiMsg(const AiGuiMsg& from);
  
  inline AiGuiMsg& operator=(const AiGuiMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AiGuiMsg& default_instance();
  
  void Swap(AiGuiMsg* other);
  
  // implements Message ----------------------------------------------
  
  AiGuiMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AiGuiMsg& from);
  void MergeFrom(const AiGuiMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ballsDataMsg ballsData = 1;
  inline bool has_ballsdata() const;
  inline void clear_ballsdata();
  static const int kBallsDataFieldNumber = 1;
  inline const ::ballsDataMsg& ballsdata() const;
  inline ::ballsDataMsg* mutable_ballsdata();
  inline ::ballsDataMsg* release_ballsdata();
  
  // repeated .robotDataMsg robotData = 2;
  inline int robotdata_size() const;
  inline void clear_robotdata();
  static const int kRobotDataFieldNumber = 2;
  inline const ::robotDataMsg& robotdata(int index) const;
  inline ::robotDataMsg* mutable_robotdata(int index);
  inline ::robotDataMsg* add_robotdata();
  inline const ::google::protobuf::RepeatedPtrField< ::robotDataMsg >&
      robotdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::robotDataMsg >*
      mutable_robotdata();
  
  // optional .gameStateMsg gameState = 3;
  inline bool has_gamestate() const;
  inline void clear_gamestate();
  static const int kGameStateFieldNumber = 3;
  inline const ::gameStateMsg& gamestate() const;
  inline ::gameStateMsg* mutable_gamestate();
  inline ::gameStateMsg* release_gamestate();
  
  // optional .AI_Debug aidbgdata = 4;
  inline bool has_aidbgdata() const;
  inline void clear_aidbgdata();
  static const int kAidbgdataFieldNumber = 4;
  inline const ::AI_Debug& aidbgdata() const;
  inline ::AI_Debug* mutable_aidbgdata();
  inline ::AI_Debug* release_aidbgdata();
  
  // @@protoc_insertion_point(class_scope:AiGuiMsg)
 private:
  inline void set_has_ballsdata();
  inline void clear_has_ballsdata();
  inline void set_has_gamestate();
  inline void clear_has_gamestate();
  inline void set_has_aidbgdata();
  inline void clear_has_aidbgdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ballsDataMsg* ballsdata_;
  ::google::protobuf::RepeatedPtrField< ::robotDataMsg > robotdata_;
  ::gameStateMsg* gamestate_;
  ::AI_Debug* aidbgdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_AssignDesc_ImmortalsProtocols_2eproto();
  friend void protobuf_ShutdownFile_ImmortalsProtocols_2eproto();
  
  void InitAsDefaultInstance();
  static AiGuiMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ballsDataMsg

// repeated .SSL_DetectionBall balls = 1;
inline int ballsDataMsg::balls_size() const {
  return balls_.size();
}
inline void ballsDataMsg::clear_balls() {
  balls_.Clear();
}
inline const ::SSL_DetectionBall& ballsDataMsg::balls(int index) const {
  return balls_.Get(index);
}
inline ::SSL_DetectionBall* ballsDataMsg::mutable_balls(int index) {
  return balls_.Mutable(index);
}
inline ::SSL_DetectionBall* ballsDataMsg::add_balls() {
  return balls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >&
ballsDataMsg::balls() const {
  return balls_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >*
ballsDataMsg::mutable_balls() {
  return &balls_;
}

// required uint32 seenState = 2;
inline bool ballsDataMsg::has_seenstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ballsDataMsg::set_has_seenstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ballsDataMsg::clear_has_seenstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ballsDataMsg::clear_seenstate() {
  seenstate_ = 0u;
  clear_has_seenstate();
}
inline ::google::protobuf::uint32 ballsDataMsg::seenstate() const {
  return seenstate_;
}
inline void ballsDataMsg::set_seenstate(::google::protobuf::uint32 value) {
  set_has_seenstate();
  seenstate_ = value;
}

// required float x = 3;
inline bool ballsDataMsg::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ballsDataMsg::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ballsDataMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ballsDataMsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ballsDataMsg::x() const {
  return x_;
}
inline void ballsDataMsg::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 4;
inline bool ballsDataMsg::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ballsDataMsg::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ballsDataMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ballsDataMsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ballsDataMsg::y() const {
  return y_;
}
inline void ballsDataMsg::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 5;
inline bool ballsDataMsg::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ballsDataMsg::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ballsDataMsg::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ballsDataMsg::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float ballsDataMsg::z() const {
  return z_;
}
inline void ballsDataMsg::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float vx = 6;
inline bool ballsDataMsg::has_vx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ballsDataMsg::set_has_vx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ballsDataMsg::clear_has_vx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ballsDataMsg::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline float ballsDataMsg::vx() const {
  return vx_;
}
inline void ballsDataMsg::set_vx(float value) {
  set_has_vx();
  vx_ = value;
}

// required float vy = 7;
inline bool ballsDataMsg::has_vy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ballsDataMsg::set_has_vy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ballsDataMsg::clear_has_vy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ballsDataMsg::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline float ballsDataMsg::vy() const {
  return vy_;
}
inline void ballsDataMsg::set_vy(float value) {
  set_has_vy();
  vy_ = value;
}

// required float vdir = 8;
inline bool ballsDataMsg::has_vdir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ballsDataMsg::set_has_vdir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ballsDataMsg::clear_has_vdir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ballsDataMsg::clear_vdir() {
  vdir_ = 0;
  clear_has_vdir();
}
inline float ballsDataMsg::vdir() const {
  return vdir_;
}
inline void ballsDataMsg::set_vdir(float value) {
  set_has_vdir();
  vdir_ = value;
}

// required float vmag = 9;
inline bool ballsDataMsg::has_vmag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ballsDataMsg::set_has_vmag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ballsDataMsg::clear_has_vmag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ballsDataMsg::clear_vmag() {
  vmag_ = 0;
  clear_has_vmag();
}
inline float ballsDataMsg::vmag() const {
  return vmag_;
}
inline void ballsDataMsg::set_vmag(float value) {
  set_has_vmag();
  vmag_ = value;
}

// -------------------------------------------------------------------

// robotDataMsg

// required uint32 seenState = 1;
inline bool robotDataMsg::has_seenstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void robotDataMsg::set_has_seenstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void robotDataMsg::clear_has_seenstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void robotDataMsg::clear_seenstate() {
  seenstate_ = 0u;
  clear_has_seenstate();
}
inline ::google::protobuf::uint32 robotDataMsg::seenstate() const {
  return seenstate_;
}
inline void robotDataMsg::set_seenstate(::google::protobuf::uint32 value) {
  set_has_seenstate();
  seenstate_ = value;
}

// optional uint32 robot_id = 2;
inline bool robotDataMsg::has_robot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void robotDataMsg::set_has_robot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void robotDataMsg::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void robotDataMsg::clear_robot_id() {
  robot_id_ = 0u;
  clear_has_robot_id();
}
inline ::google::protobuf::uint32 robotDataMsg::robot_id() const {
  return robot_id_;
}
inline void robotDataMsg::set_robot_id(::google::protobuf::uint32 value) {
  set_has_robot_id();
  robot_id_ = value;
}

// required float x = 3;
inline bool robotDataMsg::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void robotDataMsg::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void robotDataMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void robotDataMsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float robotDataMsg::x() const {
  return x_;
}
inline void robotDataMsg::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 4;
inline bool robotDataMsg::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void robotDataMsg::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void robotDataMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void robotDataMsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float robotDataMsg::y() const {
  return y_;
}
inline void robotDataMsg::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float orientation = 5;
inline bool robotDataMsg::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void robotDataMsg::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void robotDataMsg::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void robotDataMsg::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline float robotDataMsg::orientation() const {
  return orientation_;
}
inline void robotDataMsg::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
}

// required float omega = 6;
inline bool robotDataMsg::has_omega() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void robotDataMsg::set_has_omega() {
  _has_bits_[0] |= 0x00000020u;
}
inline void robotDataMsg::clear_has_omega() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void robotDataMsg::clear_omega() {
  omega_ = 0;
  clear_has_omega();
}
inline float robotDataMsg::omega() const {
  return omega_;
}
inline void robotDataMsg::set_omega(float value) {
  set_has_omega();
  omega_ = value;
}

// required float vx = 7;
inline bool robotDataMsg::has_vx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void robotDataMsg::set_has_vx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void robotDataMsg::clear_has_vx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void robotDataMsg::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline float robotDataMsg::vx() const {
  return vx_;
}
inline void robotDataMsg::set_vx(float value) {
  set_has_vx();
  vx_ = value;
}

// optional float vy = 8;
inline bool robotDataMsg::has_vy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void robotDataMsg::set_has_vy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void robotDataMsg::clear_has_vy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void robotDataMsg::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline float robotDataMsg::vy() const {
  return vy_;
}
inline void robotDataMsg::set_vy(float value) {
  set_has_vy();
  vy_ = value;
}

// required float vdir = 9;
inline bool robotDataMsg::has_vdir() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void robotDataMsg::set_has_vdir() {
  _has_bits_[0] |= 0x00000100u;
}
inline void robotDataMsg::clear_has_vdir() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void robotDataMsg::clear_vdir() {
  vdir_ = 0;
  clear_has_vdir();
}
inline float robotDataMsg::vdir() const {
  return vdir_;
}
inline void robotDataMsg::set_vdir(float value) {
  set_has_vdir();
  vdir_ = value;
}

// required float vmag = 10;
inline bool robotDataMsg::has_vmag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void robotDataMsg::set_has_vmag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void robotDataMsg::clear_has_vmag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void robotDataMsg::clear_vmag() {
  vmag_ = 0;
  clear_has_vmag();
}
inline float robotDataMsg::vmag() const {
  return vmag_;
}
inline void robotDataMsg::set_vmag(float value) {
  set_has_vmag();
  vmag_ = value;
}

// required bool own = 11;
inline bool robotDataMsg::has_own() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void robotDataMsg::set_has_own() {
  _has_bits_[0] |= 0x00000400u;
}
inline void robotDataMsg::clear_has_own() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void robotDataMsg::clear_own() {
  own_ = false;
  clear_has_own();
}
inline bool robotDataMsg::own() const {
  return own_;
}
inline void robotDataMsg::set_own(bool value) {
  set_has_own();
  own_ = value;
}

// -------------------------------------------------------------------

// gameStateMsg

// required string refcmd = 1;
inline bool gameStateMsg::has_refcmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gameStateMsg::set_has_refcmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gameStateMsg::clear_has_refcmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gameStateMsg::clear_refcmd() {
  if (refcmd_ != &::google::protobuf::internal::kEmptyString) {
    refcmd_->clear();
  }
  clear_has_refcmd();
}
inline const ::std::string& gameStateMsg::refcmd() const {
  return *refcmd_;
}
inline void gameStateMsg::set_refcmd(const ::std::string& value) {
  set_has_refcmd();
  if (refcmd_ == &::google::protobuf::internal::kEmptyString) {
    refcmd_ = new ::std::string;
  }
  refcmd_->assign(value);
}
inline void gameStateMsg::set_refcmd(const char* value) {
  set_has_refcmd();
  if (refcmd_ == &::google::protobuf::internal::kEmptyString) {
    refcmd_ = new ::std::string;
  }
  refcmd_->assign(value);
}
inline void gameStateMsg::set_refcmd(const char* value, size_t size) {
  set_has_refcmd();
  if (refcmd_ == &::google::protobuf::internal::kEmptyString) {
    refcmd_ = new ::std::string;
  }
  refcmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gameStateMsg::mutable_refcmd() {
  set_has_refcmd();
  if (refcmd_ == &::google::protobuf::internal::kEmptyString) {
    refcmd_ = new ::std::string;
  }
  return refcmd_;
}
inline ::std::string* gameStateMsg::release_refcmd() {
  clear_has_refcmd();
  if (refcmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refcmd_;
    refcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string state = 2;
inline bool gameStateMsg::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gameStateMsg::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gameStateMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gameStateMsg::clear_state() {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& gameStateMsg::state() const {
  return *state_;
}
inline void gameStateMsg::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void gameStateMsg::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void gameStateMsg::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gameStateMsg::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  return state_;
}
inline ::std::string* gameStateMsg::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 timeRemaining = 3;
inline bool gameStateMsg::has_timeremaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gameStateMsg::set_has_timeremaining() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gameStateMsg::clear_has_timeremaining() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gameStateMsg::clear_timeremaining() {
  timeremaining_ = 0u;
  clear_has_timeremaining();
}
inline ::google::protobuf::uint32 gameStateMsg::timeremaining() const {
  return timeremaining_;
}
inline void gameStateMsg::set_timeremaining(::google::protobuf::uint32 value) {
  set_has_timeremaining();
  timeremaining_ = value;
}

// required uint32 goalBlue = 4;
inline bool gameStateMsg::has_goalblue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gameStateMsg::set_has_goalblue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gameStateMsg::clear_has_goalblue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gameStateMsg::clear_goalblue() {
  goalblue_ = 0u;
  clear_has_goalblue();
}
inline ::google::protobuf::uint32 gameStateMsg::goalblue() const {
  return goalblue_;
}
inline void gameStateMsg::set_goalblue(::google::protobuf::uint32 value) {
  set_has_goalblue();
  goalblue_ = value;
}

// required uint32 goalYellow = 5;
inline bool gameStateMsg::has_goalyellow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gameStateMsg::set_has_goalyellow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gameStateMsg::clear_has_goalyellow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gameStateMsg::clear_goalyellow() {
  goalyellow_ = 0u;
  clear_has_goalyellow();
}
inline ::google::protobuf::uint32 gameStateMsg::goalyellow() const {
  return goalyellow_;
}
inline void gameStateMsg::set_goalyellow(::google::protobuf::uint32 value) {
  set_has_goalyellow();
  goalyellow_ = value;
}

// required bool probGoalBlue = 6;
inline bool gameStateMsg::has_probgoalblue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gameStateMsg::set_has_probgoalblue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gameStateMsg::clear_has_probgoalblue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gameStateMsg::clear_probgoalblue() {
  probgoalblue_ = false;
  clear_has_probgoalblue();
}
inline bool gameStateMsg::probgoalblue() const {
  return probgoalblue_;
}
inline void gameStateMsg::set_probgoalblue(bool value) {
  set_has_probgoalblue();
  probgoalblue_ = value;
}

// required bool probGoalYellow = 7;
inline bool gameStateMsg::has_probgoalyellow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gameStateMsg::set_has_probgoalyellow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gameStateMsg::clear_has_probgoalyellow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gameStateMsg::clear_probgoalyellow() {
  probgoalyellow_ = false;
  clear_has_probgoalyellow();
}
inline bool gameStateMsg::probgoalyellow() const {
  return probgoalyellow_;
}
inline void gameStateMsg::set_probgoalyellow(bool value) {
  set_has_probgoalyellow();
  probgoalyellow_ = value;
}

// optional bool twoDefBlue = 8;
inline bool gameStateMsg::has_twodefblue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gameStateMsg::set_has_twodefblue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gameStateMsg::clear_has_twodefblue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gameStateMsg::clear_twodefblue() {
  twodefblue_ = false;
  clear_has_twodefblue();
}
inline bool gameStateMsg::twodefblue() const {
  return twodefblue_;
}
inline void gameStateMsg::set_twodefblue(bool value) {
  set_has_twodefblue();
  twodefblue_ = value;
}

// optional bool twoDefYellow = 9;
inline bool gameStateMsg::has_twodefyellow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gameStateMsg::set_has_twodefyellow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gameStateMsg::clear_has_twodefyellow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gameStateMsg::clear_twodefyellow() {
  twodefyellow_ = false;
  clear_has_twodefyellow();
}
inline bool gameStateMsg::twodefyellow() const {
  return twodefyellow_;
}
inline void gameStateMsg::set_twodefyellow(bool value) {
  set_has_twodefyellow();
  twodefyellow_ = value;
}

// optional bool probBallOut = 10;
inline bool gameStateMsg::has_probballout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gameStateMsg::set_has_probballout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gameStateMsg::clear_has_probballout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gameStateMsg::clear_probballout() {
  probballout_ = false;
  clear_has_probballout();
}
inline bool gameStateMsg::probballout() const {
  return probballout_;
}
inline void gameStateMsg::set_probballout(bool value) {
  set_has_probballout();
  probballout_ = value;
}

// -------------------------------------------------------------------

// AiGuiMsg

// required .ballsDataMsg ballsData = 1;
inline bool AiGuiMsg::has_ballsdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AiGuiMsg::set_has_ballsdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AiGuiMsg::clear_has_ballsdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AiGuiMsg::clear_ballsdata() {
  if (ballsdata_ != NULL) ballsdata_->::ballsDataMsg::Clear();
  clear_has_ballsdata();
}
inline const ::ballsDataMsg& AiGuiMsg::ballsdata() const {
  return ballsdata_ != NULL ? *ballsdata_ : *default_instance_->ballsdata_;
}
inline ::ballsDataMsg* AiGuiMsg::mutable_ballsdata() {
  set_has_ballsdata();
  if (ballsdata_ == NULL) ballsdata_ = new ::ballsDataMsg;
  return ballsdata_;
}
inline ::ballsDataMsg* AiGuiMsg::release_ballsdata() {
  clear_has_ballsdata();
  ::ballsDataMsg* temp = ballsdata_;
  ballsdata_ = NULL;
  return temp;
}

// repeated .robotDataMsg robotData = 2;
inline int AiGuiMsg::robotdata_size() const {
  return robotdata_.size();
}
inline void AiGuiMsg::clear_robotdata() {
  robotdata_.Clear();
}
inline const ::robotDataMsg& AiGuiMsg::robotdata(int index) const {
  return robotdata_.Get(index);
}
inline ::robotDataMsg* AiGuiMsg::mutable_robotdata(int index) {
  return robotdata_.Mutable(index);
}
inline ::robotDataMsg* AiGuiMsg::add_robotdata() {
  return robotdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robotDataMsg >&
AiGuiMsg::robotdata() const {
  return robotdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::robotDataMsg >*
AiGuiMsg::mutable_robotdata() {
  return &robotdata_;
}

// optional .gameStateMsg gameState = 3;
inline bool AiGuiMsg::has_gamestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AiGuiMsg::set_has_gamestate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AiGuiMsg::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AiGuiMsg::clear_gamestate() {
  if (gamestate_ != NULL) gamestate_->::gameStateMsg::Clear();
  clear_has_gamestate();
}
inline const ::gameStateMsg& AiGuiMsg::gamestate() const {
  return gamestate_ != NULL ? *gamestate_ : *default_instance_->gamestate_;
}
inline ::gameStateMsg* AiGuiMsg::mutable_gamestate() {
  set_has_gamestate();
  if (gamestate_ == NULL) gamestate_ = new ::gameStateMsg;
  return gamestate_;
}
inline ::gameStateMsg* AiGuiMsg::release_gamestate() {
  clear_has_gamestate();
  ::gameStateMsg* temp = gamestate_;
  gamestate_ = NULL;
  return temp;
}

// optional .AI_Debug aidbgdata = 4;
inline bool AiGuiMsg::has_aidbgdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AiGuiMsg::set_has_aidbgdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AiGuiMsg::clear_has_aidbgdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AiGuiMsg::clear_aidbgdata() {
  if (aidbgdata_ != NULL) aidbgdata_->::AI_Debug::Clear();
  clear_has_aidbgdata();
}
inline const ::AI_Debug& AiGuiMsg::aidbgdata() const {
  return aidbgdata_ != NULL ? *aidbgdata_ : *default_instance_->aidbgdata_;
}
inline ::AI_Debug* AiGuiMsg::mutable_aidbgdata() {
  set_has_aidbgdata();
  if (aidbgdata_ == NULL) aidbgdata_ = new ::AI_Debug;
  return aidbgdata_;
}
inline ::AI_Debug* AiGuiMsg::release_aidbgdata() {
  clear_has_aidbgdata();
  ::AI_Debug* temp = aidbgdata_;
  aidbgdata_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ImmortalsProtocols_2eproto__INCLUDED
