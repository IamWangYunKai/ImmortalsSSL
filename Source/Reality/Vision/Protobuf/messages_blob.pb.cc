// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_blob.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_blob.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LHP_Blob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LHP_Blob_reflection_ = NULL;
const ::google::protobuf::Descriptor* LHP_Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LHP_Frame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5fblob_2eproto() {
  protobuf_AddDesc_messages_5fblob_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_blob.proto");
  GOOGLE_CHECK(file != NULL);
  LHP_Blob_descriptor_ = file->message_type(0);
  static const int LHP_Blob_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, cen_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, cen_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, bb_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, area_),
  };
  LHP_Blob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LHP_Blob_descriptor_,
      LHP_Blob::default_instance_,
      LHP_Blob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Blob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LHP_Blob));
  LHP_Frame_descriptor_ = file->message_type(1);
  static const int LHP_Frame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Frame, frame_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Frame, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Frame, blob_),
  };
  LHP_Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LHP_Frame_descriptor_,
      LHP_Frame::default_instance_,
      LHP_Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LHP_Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LHP_Frame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5fblob_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LHP_Blob_descriptor_, &LHP_Blob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LHP_Frame_descriptor_, &LHP_Frame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5fblob_2eproto() {
  delete LHP_Blob::default_instance_;
  delete LHP_Blob_reflection_;
  delete LHP_Frame::default_instance_;
  delete LHP_Frame_reflection_;
}

void protobuf_AddDesc_messages_5fblob_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023messages_blob.proto\"\206\001\n\010LHP_Blob\022\r\n\005co"
    "lor\030\001 \002(\r\022\n\n\002x1\030\002 \002(\002\022\n\n\002y1\030\003 \002(\002\022\n\n\002x2\030"
    "\004 \002(\002\022\n\n\002y2\030\005 \002(\002\022\r\n\005cen_x\030\006 \001(\002\022\r\n\005cen_"
    "y\030\007 \001(\002\022\017\n\007bb_area\030\010 \001(\r\022\014\n\004area\030\t \001(\r\"M"
    "\n\tLHP_Frame\022\024\n\014frame_number\030\001 \002(\r\022\021\n\tcam"
    "era_id\030\004 \002(\r\022\027\n\004blob\030\005 \003(\0132\t.LHP_Blob", 237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_blob.proto", &protobuf_RegisterTypes);
  LHP_Blob::default_instance_ = new LHP_Blob();
  LHP_Frame::default_instance_ = new LHP_Frame();
  LHP_Blob::default_instance_->InitAsDefaultInstance();
  LHP_Frame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5fblob_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5fblob_2eproto {
  StaticDescriptorInitializer_messages_5fblob_2eproto() {
    protobuf_AddDesc_messages_5fblob_2eproto();
  }
} static_descriptor_initializer_messages_5fblob_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LHP_Blob::kColorFieldNumber;
const int LHP_Blob::kX1FieldNumber;
const int LHP_Blob::kY1FieldNumber;
const int LHP_Blob::kX2FieldNumber;
const int LHP_Blob::kY2FieldNumber;
const int LHP_Blob::kCenXFieldNumber;
const int LHP_Blob::kCenYFieldNumber;
const int LHP_Blob::kBbAreaFieldNumber;
const int LHP_Blob::kAreaFieldNumber;
#endif  // !_MSC_VER

LHP_Blob::LHP_Blob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LHP_Blob)
}

void LHP_Blob::InitAsDefaultInstance() {
}

LHP_Blob::LHP_Blob(const LHP_Blob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LHP_Blob)
}

void LHP_Blob::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0u;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  cen_x_ = 0;
  cen_y_ = 0;
  bb_area_ = 0u;
  area_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LHP_Blob::~LHP_Blob() {
  // @@protoc_insertion_point(destructor:LHP_Blob)
  SharedDtor();
}

void LHP_Blob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LHP_Blob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LHP_Blob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LHP_Blob_descriptor_;
}

const LHP_Blob& LHP_Blob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fblob_2eproto();
  return *default_instance_;
}

LHP_Blob* LHP_Blob::default_instance_ = NULL;

LHP_Blob* LHP_Blob::New() const {
  return new LHP_Blob;
}

void LHP_Blob::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LHP_Blob*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(color_, bb_area_);
  }
  area_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LHP_Blob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LHP_Blob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 color = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x1;
        break;
      }

      // required float x1 = 2;
      case 2: {
        if (tag == 21) {
         parse_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y1;
        break;
      }

      // required float y1 = 3;
      case 3: {
        if (tag == 29) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_x2;
        break;
      }

      // required float x2 = 4;
      case 4: {
        if (tag == 37) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_y2;
        break;
      }

      // required float y2 = 5;
      case 5: {
        if (tag == 45) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cen_x;
        break;
      }

      // optional float cen_x = 6;
      case 6: {
        if (tag == 53) {
         parse_cen_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cen_x_)));
          set_has_cen_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_cen_y;
        break;
      }

      // optional float cen_y = 7;
      case 7: {
        if (tag == 61) {
         parse_cen_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cen_y_)));
          set_has_cen_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bb_area;
        break;
      }

      // optional uint32 bb_area = 8;
      case 8: {
        if (tag == 64) {
         parse_bb_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bb_area_)));
          set_has_bb_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_area;
        break;
      }

      // optional uint32 area = 9;
      case 9: {
        if (tag == 72) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LHP_Blob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LHP_Blob)
  return false;
#undef DO_
}

void LHP_Blob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LHP_Blob)
  // required uint32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // required float x1 = 2;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x1(), output);
  }

  // required float y1 = 3;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y1(), output);
  }

  // required float x2 = 4;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x2(), output);
  }

  // required float y2 = 5;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y2(), output);
  }

  // optional float cen_x = 6;
  if (has_cen_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cen_x(), output);
  }

  // optional float cen_y = 7;
  if (has_cen_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cen_y(), output);
  }

  // optional uint32 bb_area = 8;
  if (has_bb_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bb_area(), output);
  }

  // optional uint32 area = 9;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LHP_Blob)
}

::google::protobuf::uint8* LHP_Blob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LHP_Blob)
  // required uint32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  // required float x1 = 2;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x1(), target);
  }

  // required float y1 = 3;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y1(), target);
  }

  // required float x2 = 4;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x2(), target);
  }

  // required float y2 = 5;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y2(), target);
  }

  // optional float cen_x = 6;
  if (has_cen_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cen_x(), target);
  }

  // optional float cen_y = 7;
  if (has_cen_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cen_y(), target);
  }

  // optional uint32 bb_area = 8;
  if (has_bb_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bb_area(), target);
  }

  // optional uint32 area = 9;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LHP_Blob)
  return target;
}

int LHP_Blob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // required float x1 = 2;
    if (has_x1()) {
      total_size += 1 + 4;
    }

    // required float y1 = 3;
    if (has_y1()) {
      total_size += 1 + 4;
    }

    // required float x2 = 4;
    if (has_x2()) {
      total_size += 1 + 4;
    }

    // required float y2 = 5;
    if (has_y2()) {
      total_size += 1 + 4;
    }

    // optional float cen_x = 6;
    if (has_cen_x()) {
      total_size += 1 + 4;
    }

    // optional float cen_y = 7;
    if (has_cen_y()) {
      total_size += 1 + 4;
    }

    // optional uint32 bb_area = 8;
    if (has_bb_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bb_area());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 area = 9;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LHP_Blob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LHP_Blob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LHP_Blob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LHP_Blob::MergeFrom(const LHP_Blob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_cen_x()) {
      set_cen_x(from.cen_x());
    }
    if (from.has_cen_y()) {
      set_cen_y(from.cen_y());
    }
    if (from.has_bb_area()) {
      set_bb_area(from.bb_area());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LHP_Blob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LHP_Blob::CopyFrom(const LHP_Blob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LHP_Blob::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void LHP_Blob::Swap(LHP_Blob* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(cen_x_, other->cen_x_);
    std::swap(cen_y_, other->cen_y_);
    std::swap(bb_area_, other->bb_area_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LHP_Blob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LHP_Blob_descriptor_;
  metadata.reflection = LHP_Blob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LHP_Frame::kFrameNumberFieldNumber;
const int LHP_Frame::kCameraIdFieldNumber;
const int LHP_Frame::kBlobFieldNumber;
#endif  // !_MSC_VER

LHP_Frame::LHP_Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LHP_Frame)
}

void LHP_Frame::InitAsDefaultInstance() {
}

LHP_Frame::LHP_Frame(const LHP_Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LHP_Frame)
}

void LHP_Frame::SharedCtor() {
  _cached_size_ = 0;
  frame_number_ = 0u;
  camera_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LHP_Frame::~LHP_Frame() {
  // @@protoc_insertion_point(destructor:LHP_Frame)
  SharedDtor();
}

void LHP_Frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LHP_Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LHP_Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LHP_Frame_descriptor_;
}

const LHP_Frame& LHP_Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fblob_2eproto();
  return *default_instance_;
}

LHP_Frame* LHP_Frame::default_instance_ = NULL;

LHP_Frame* LHP_Frame::New() const {
  return new LHP_Frame;
}

void LHP_Frame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LHP_Frame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(frame_number_, camera_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  blob_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LHP_Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LHP_Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_number_)));
          set_has_frame_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_camera_id;
        break;
      }

      // required uint32 camera_id = 4;
      case 4: {
        if (tag == 32) {
         parse_camera_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blob;
        break;
      }

      // repeated .LHP_Blob blob = 5;
      case 5: {
        if (tag == 42) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blob;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LHP_Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LHP_Frame)
  return false;
#undef DO_
}

void LHP_Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LHP_Frame)
  // required uint32 frame_number = 1;
  if (has_frame_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_number(), output);
  }

  // required uint32 camera_id = 4;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->camera_id(), output);
  }

  // repeated .LHP_Blob blob = 5;
  for (int i = 0; i < this->blob_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->blob(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LHP_Frame)
}

::google::protobuf::uint8* LHP_Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LHP_Frame)
  // required uint32 frame_number = 1;
  if (has_frame_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_number(), target);
  }

  // required uint32 camera_id = 4;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->camera_id(), target);
  }

  // repeated .LHP_Blob blob = 5;
  for (int i = 0; i < this->blob_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->blob(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LHP_Frame)
  return target;
}

int LHP_Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frame_number = 1;
    if (has_frame_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_number());
    }

    // required uint32 camera_id = 4;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_id());
    }

  }
  // repeated .LHP_Blob blob = 5;
  total_size += 1 * this->blob_size();
  for (int i = 0; i < this->blob_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blob(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LHP_Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LHP_Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LHP_Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LHP_Frame::MergeFrom(const LHP_Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  blob_.MergeFrom(from.blob_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_number()) {
      set_frame_number(from.frame_number());
    }
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LHP_Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LHP_Frame::CopyFrom(const LHP_Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LHP_Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->blob())) return false;
  return true;
}

void LHP_Frame::Swap(LHP_Frame* other) {
  if (other != this) {
    std::swap(frame_number_, other->frame_number_);
    std::swap(camera_id_, other->camera_id_);
    blob_.Swap(&other->blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LHP_Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LHP_Frame_descriptor_;
  metadata.reflection = LHP_Frame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
